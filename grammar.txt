<program> := program ( ) { <statement-list> }
<statement-list> := <statement> <statement-list>
<statement-list> := <statement>
<statement> := <declaration> ;
<statement> := <assignment> ;
<statement> := <row-list>
<declaration> := declare list of variables <identifier-list> : <type>
<declaration> := declare <identifier> : <type>
<identifier-list> := <identifier>
<identifier-list> := <identifier> <identifier-list>
<type> := <primitive_type>
<type> := <array>
<primitive_type> := integer
<primitive_type> := real
<primitive_type> := boolean
<array> := <rectangular_array>
<array> := <jagged_array>
<rectangular_array> := array <enumeration-list> of integer
<enumeration-list> := <enumeration> <enumeration-list>
<enumeration-list> := <enumeration>
<enumeration> := <static_enumeration>
<enumeration> := <dynamic_enumeration>
<static_enumeration> := [ <CONSTANT> .. <CONSTANT> ]
<dynamic_enumeration> := [ <identifier> .. <identifier> ]
<dynamic_enumeration> := [ <CONSTANT> .. <identifier> ]
<dynamic_enumeration> := [ <identifier> .. <CONSTANT> ]
<jagged_array> := jagged array <static_enumeration><brackets>
<brackets> := [ ]
<brackets> := [ ] [ ]
<row-list> := <row> <row-list>
<row-list> := <row>
<row> := R1 [ <CONSTANT> ] : size <CONSTANT> : values { <constant-list> }
<constant-list> := <constants> ; <constant-list>
<constant-list> := <constants>
<constants> := <constants> <CONSTANT>
<constants> := <CONSTANT>
<assignment> := <identifier> = <expression>
<expression> := <boolean_expression>
<expression> := <arithmetic_expression>
<term> := <boolean_term>
<term> := <arithmetic_term>
<boolean_expression> := <boolean_expression> ||| <boolean_expression>
<boolean_expression> := <boolean_term>
<boolean_term> := ( <boolean_expression> )
<boolean_term> := <boolean_term> &&& <boolean_term>
<boolean_term> := <identifier>
<arithmetic_expression> := <arithmetic_expression> + <arithmetic_expression>
<arithmetic_expression> := <arithmetic_expression> - <arithmetic_expression>
<arithmetic_expression> := <arithmetic_term>
<arithmetic_term> := ( <arithmetic_expression> )
<arithmetic_term> := <arithmetic_term> * <arithmetic_term>
<arithmetic_term> := <arithmetic_term> / <arithmetic_term>
<arithmetic_term> := <identifier>
<arithmetic_term> := <constant>
